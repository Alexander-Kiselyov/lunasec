"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFakeTokenizerService = void 0;
const express_1 = __importDefault(require("express"));
const test_constants_1 = require("./test-constants");
const constants_1 = require("../constants");
function createFakeTokenizerService(config) {
    const app = express_1.default();
    function respondWithJson(json) {
        return async function jsonResponder(req, res) {
            if (config.onRequestCallback) {
                const customResponse = await config.onRequestCallback(req);
                if (customResponse) {
                    res.json(customResponse);
                    return;
                }
            }
            res.json(json);
        };
    }
    app.use(constants_1.CONFIG_DEFAULTS.endpoints.setToken, respondWithJson({
        success: true,
        data: {
            tokenId: test_constants_1.TEST_TOKEN,
            uploadUrl: test_constants_1.makeS3Url(config.port),
            headers: test_constants_1.TEST_S3_HEADERS.PUT,
        },
    }));
    app.use(constants_1.CONFIG_DEFAULTS.endpoints.getToken, respondWithJson({
        success: true,
        data: {
            downloadUrl: test_constants_1.makeS3Url(config.port),
            headers: test_constants_1.TEST_S3_HEADERS.GET,
        },
    }));
    app.use(constants_1.CONFIG_DEFAULTS.endpoints.setMetadata, respondWithJson({
        success: true,
    }));
    app.use(constants_1.CONFIG_DEFAULTS.endpoints.getMetadata, respondWithJson({
        success: true,
        data: {
            value: test_constants_1.TEST_METADATA,
        },
    }));
    app.put(`/${test_constants_1.TEST_S3_FILE_PATH}`, async (req, res) => {
        if (config.onS3Callback) {
            const customResponse = await config.onS3Callback(req);
            if (customResponse) {
                res.json(customResponse);
                return;
            }
        }
        res.send();
    });
    app.get(`/${test_constants_1.TEST_S3_FILE_PATH}`, async (req, res) => {
        if (config.onS3Callback) {
            const customResponse = await config.onS3Callback(req);
            if (customResponse) {
                res.json(customResponse);
                return;
            }
        }
        res.send(test_constants_1.TEST_PLAINTEXT_VALUE);
    });
    return app.listen(config.port);
}
exports.createFakeTokenizerService = createFakeTokenizerService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFrZS10b2tlbml6ZXItc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZha2UtdG9rZW5pemVyLXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsc0RBQThCO0FBRTlCLHFEQU0wQjtBQUMxQiw0Q0FBK0M7QUFVL0MsU0FBZ0IsMEJBQTBCLENBQUMsTUFBa0M7SUFFM0UsTUFBTSxHQUFHLEdBQUcsaUJBQU8sRUFBRSxDQUFDO0lBRXRCLFNBQVMsZUFBZSxDQUFJLElBQU87UUFDakMsT0FBTyxLQUFLLFVBQVUsYUFBYSxDQUFDLEdBQW9CLEVBQUUsR0FBcUI7WUFDN0UsSUFBSSxNQUFNLENBQUMsaUJBQWlCLEVBQUU7Z0JBQzVCLE1BQU0sY0FBYyxHQUFHLE1BQU0sTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUUzRCxJQUFJLGNBQWMsRUFBRTtvQkFDbEIsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztvQkFDekIsT0FBTztpQkFDUjthQUNGO1lBRUQsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQixDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQUcsQ0FDTCwyQkFBZSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQ2xDLGVBQWUsQ0FBbUI7UUFDaEMsT0FBTyxFQUFFLElBQUk7UUFDYixJQUFJLEVBQUU7WUFDSixPQUFPLEVBQUUsMkJBQVU7WUFDbkIsU0FBUyxFQUFFLDBCQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztZQUNqQyxPQUFPLEVBQUUsZ0NBQWUsQ0FBQyxHQUFHO1NBQzdCO0tBQ0YsQ0FBQyxDQUNILENBQUM7SUFFRixHQUFHLENBQUMsR0FBRyxDQUNMLDJCQUFlLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFDbEMsZUFBZSxDQUFtQjtRQUNoQyxPQUFPLEVBQUUsSUFBSTtRQUNiLElBQUksRUFBRTtZQUNKLFdBQVcsRUFBRSwwQkFBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDbkMsT0FBTyxFQUFFLGdDQUFlLENBQUMsR0FBRztTQUM3QjtLQUNGLENBQUMsQ0FDSCxDQUFDO0lBRUYsR0FBRyxDQUFDLEdBQUcsQ0FDTCwyQkFBZSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQ3JDLGVBQWUsQ0FBc0I7UUFDbkMsT0FBTyxFQUFFLElBQUk7S0FDZCxDQUFDLENBQ0gsQ0FBQztJQUVGLEdBQUcsQ0FBQyxHQUFHLENBQ0wsMkJBQWUsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUNyQyxlQUFlLENBQXNCO1FBQ25DLE9BQU8sRUFBRSxJQUFJO1FBQ2IsSUFBSSxFQUFFO1lBQ0osS0FBSyxFQUFFLDhCQUFhO1NBQ3JCO0tBQ0YsQ0FBQyxDQUNILENBQUM7SUFFRixHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksa0NBQWlCLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ2xELElBQUksTUFBTSxDQUFDLFlBQVksRUFBRTtZQUN2QixNQUFNLGNBQWMsR0FBRyxNQUFNLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFdEQsSUFBSSxjQUFjLEVBQUU7Z0JBQ2xCLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7Z0JBQ3pCLE9BQU87YUFDUjtTQUNGO1FBRUQsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2IsQ0FBQyxDQUFDLENBQUM7SUFFSCxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksa0NBQWlCLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ2xELElBQUksTUFBTSxDQUFDLFlBQVksRUFBRTtZQUN2QixNQUFNLGNBQWMsR0FBRyxNQUFNLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFdEQsSUFBSSxjQUFjLEVBQUU7Z0JBQ2xCLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7Z0JBQ3pCLE9BQU87YUFDUjtTQUNGO1FBRUQsR0FBRyxDQUFDLElBQUksQ0FBQyxxQ0FBb0IsQ0FBQyxDQUFDO0lBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBdEZELGdFQXNGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgR2V0TWV0YWRhdGFSZXNwb25zZSwgR2V0VG9rZW5SZXNwb25zZSwgU2V0TWV0YWRhdGFSZXNwb25zZSwgU2V0VG9rZW5SZXNwb25zZSB9IGZyb20gJy4uL2FwaS90eXBlcyc7XG5pbXBvcnQge1xuICBtYWtlUzNVcmwsXG4gIFRFU1RfTUVUQURBVEEsXG4gIFRFU1RfUExBSU5URVhUX1ZBTFVFLFxuICBURVNUX1MzX0hFQURFUlMsXG4gIFRFU1RfVE9LRU4sIFRFU1RfUzNfRklMRV9QQVRIXG59IGZyb20gJy4vdGVzdC1jb25zdGFudHMnO1xuaW1wb3J0IHsgQ09ORklHX0RFRkFVTFRTIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuZXhwb3J0IHR5cGUgT25SZXNwb25zZUNhbGxiYWNrID0gKHJlcTogZXhwcmVzcy5SZXF1ZXN0KSA9PiBQcm9taXNlPFJlY29yZDxzdHJpbmcsIGFueT4gfCB2b2lkPjtcblxuZXhwb3J0IGludGVyZmFjZSBGYWtlVG9rZW5pemVyU2VydmljZUNvbmZpZyB7XG4gIHBvcnQ6IG51bWJlcjtcbiAgb25SZXF1ZXN0Q2FsbGJhY2s/OiBPblJlc3BvbnNlQ2FsbGJhY2s7XG4gIG9uUzNDYWxsYmFjaz86IE9uUmVzcG9uc2VDYWxsYmFjaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZha2VUb2tlbml6ZXJTZXJ2aWNlKGNvbmZpZzogRmFrZVRva2VuaXplclNlcnZpY2VDb25maWcpIHtcblxuICBjb25zdCBhcHAgPSBleHByZXNzKCk7XG5cbiAgZnVuY3Rpb24gcmVzcG9uZFdpdGhKc29uPFQ+KGpzb246IFQpIHtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24ganNvblJlc3BvbmRlcihyZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlKSB7XG4gICAgICBpZiAoY29uZmlnLm9uUmVxdWVzdENhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IGN1c3RvbVJlc3BvbnNlID0gYXdhaXQgY29uZmlnLm9uUmVxdWVzdENhbGxiYWNrKHJlcSk7XG5cbiAgICAgICAgaWYgKGN1c3RvbVJlc3BvbnNlKSB7XG4gICAgICAgICAgcmVzLmpzb24oY3VzdG9tUmVzcG9uc2UpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXMuanNvbihqc29uKTtcbiAgICB9O1xuICB9XG5cbiAgYXBwLnVzZShcbiAgICBDT05GSUdfREVGQVVMVFMuZW5kcG9pbnRzLnNldFRva2VuLFxuICAgIHJlc3BvbmRXaXRoSnNvbjxTZXRUb2tlblJlc3BvbnNlPih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YToge1xuICAgICAgICB0b2tlbklkOiBURVNUX1RPS0VOLFxuICAgICAgICB1cGxvYWRVcmw6IG1ha2VTM1VybChjb25maWcucG9ydCksXG4gICAgICAgIGhlYWRlcnM6IFRFU1RfUzNfSEVBREVSUy5QVVQsXG4gICAgICB9LFxuICAgIH0pXG4gICk7XG5cbiAgYXBwLnVzZShcbiAgICBDT05GSUdfREVGQVVMVFMuZW5kcG9pbnRzLmdldFRva2VuLFxuICAgIHJlc3BvbmRXaXRoSnNvbjxHZXRUb2tlblJlc3BvbnNlPih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YToge1xuICAgICAgICBkb3dubG9hZFVybDogbWFrZVMzVXJsKGNvbmZpZy5wb3J0KSxcbiAgICAgICAgaGVhZGVyczogVEVTVF9TM19IRUFERVJTLkdFVCxcbiAgICAgIH0sXG4gICAgfSlcbiAgKTtcblxuICBhcHAudXNlKFxuICAgIENPTkZJR19ERUZBVUxUUy5lbmRwb2ludHMuc2V0TWV0YWRhdGEsXG4gICAgcmVzcG9uZFdpdGhKc29uPFNldE1ldGFkYXRhUmVzcG9uc2U+KHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgfSlcbiAgKTtcblxuICBhcHAudXNlKFxuICAgIENPTkZJR19ERUZBVUxUUy5lbmRwb2ludHMuZ2V0TWV0YWRhdGEsXG4gICAgcmVzcG9uZFdpdGhKc29uPEdldE1ldGFkYXRhUmVzcG9uc2U+KHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHZhbHVlOiBURVNUX01FVEFEQVRBLFxuICAgICAgfSxcbiAgICB9KVxuICApO1xuXG4gIGFwcC5wdXQoYC8ke1RFU1RfUzNfRklMRV9QQVRIfWAsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIGlmIChjb25maWcub25TM0NhbGxiYWNrKSB7XG4gICAgICBjb25zdCBjdXN0b21SZXNwb25zZSA9IGF3YWl0IGNvbmZpZy5vblMzQ2FsbGJhY2socmVxKTtcblxuICAgICAgaWYgKGN1c3RvbVJlc3BvbnNlKSB7XG4gICAgICAgIHJlcy5qc29uKGN1c3RvbVJlc3BvbnNlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJlcy5zZW5kKCk7XG4gIH0pO1xuXG4gIGFwcC5nZXQoYC8ke1RFU1RfUzNfRklMRV9QQVRIfWAsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIGlmIChjb25maWcub25TM0NhbGxiYWNrKSB7XG4gICAgICBjb25zdCBjdXN0b21SZXNwb25zZSA9IGF3YWl0IGNvbmZpZy5vblMzQ2FsbGJhY2socmVxKTtcblxuICAgICAgaWYgKGN1c3RvbVJlc3BvbnNlKSB7XG4gICAgICAgIHJlcy5qc29uKGN1c3RvbVJlc3BvbnNlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJlcy5zZW5kKFRFU1RfUExBSU5URVhUX1ZBTFVFKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGFwcC5saXN0ZW4oY29uZmlnLnBvcnQpO1xufVxuIl19