"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeGenericApiClient = exports.makeSecureApiRequest = void 0;
const common_1 = require("@lunasec/common");
const constants_1 = require("./constants");
async function makeSecureApiRequest(request, path, params) {
    try {
        // TODO: Add runtime JSON validation for response
        const response = await common_1.makeRequest(constants_1.__SECURE_RESOLVER_URL__, path, params, common_1.getRequestBody(request));
        if (!response.success) {
            return {
                success: false,
                error: new Error(response.msg !== undefined ? response.msg : 'Malformed response from API with missing error message'),
            };
        }
        return {
            success: true,
            data: response.result,
        };
    }
    catch (e) {
        return {
            success: false,
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            error: e,
        };
    }
}
exports.makeSecureApiRequest = makeSecureApiRequest;
function makeGenericApiClient(path, requestBaseConfig) {
    return async (request, requestOverrides) => {
        const requestConfig = Object.assign({}, requestBaseConfig, requestOverrides);
        return await makeSecureApiRequest(request, path, requestConfig);
    };
}
exports.makeGenericApiClient = makeGenericApiClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLWNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwaS1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsNENBQThEO0FBRTlELDJDQUFvRDtBQW1CN0MsS0FBSyxVQUFVLG9CQUFvQixDQUl4QyxPQUFpQixFQUNqQixJQUFZLEVBQ1osTUFBOEI7SUFFOUIsSUFBSTtRQUNGLGlEQUFpRDtRQUNqRCxNQUFNLFFBQVEsR0FBRyxNQUFNLG9CQUFXLENBRWhDLG1DQUF1QixFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsdUJBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRWxFLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFO1lBQ3JCLE9BQU87Z0JBQ0wsT0FBTyxFQUFFLEtBQUs7Z0JBQ2QsS0FBSyxFQUFFLElBQUksS0FBSyxDQUNkLFFBQVEsQ0FBQyxHQUFHLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyx3REFBd0QsQ0FDckc7YUFDRixDQUFDO1NBQ0g7UUFFRCxPQUFPO1lBQ0wsT0FBTyxFQUFFLElBQUk7WUFDYixJQUFJLEVBQUUsUUFBUSxDQUFDLE1BQU07U0FDdEIsQ0FBQztLQUNIO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixPQUFPO1lBQ0wsT0FBTyxFQUFFLEtBQUs7WUFDZCxtRUFBbUU7WUFDbkUsS0FBSyxFQUFFLENBQUM7U0FDVCxDQUFDO0tBQ0g7QUFDSCxDQUFDO0FBbENELG9EQWtDQztBQU9ELFNBQWdCLG9CQUFvQixDQUFDLElBQVksRUFBRSxpQkFBeUM7SUFDMUYsT0FBTyxLQUFLLEVBQ1YsT0FBMEMsRUFDMUMsZ0JBQXlDLEVBQ3pDLEVBQUU7UUFDRixNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxpQkFBaUIsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBRTdFLE9BQU8sTUFBTSxvQkFBb0IsQ0FBdUMsT0FBTyxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztJQUN4RyxDQUFDLENBQUM7QUFDSixDQUFDO0FBVEQsb0RBU0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBodHRwIGZyb20gJ2h0dHAnO1xuXG5pbXBvcnQgeyBnZXRSZXF1ZXN0Qm9keSwgbWFrZVJlcXVlc3QgfSBmcm9tICdAbHVuYXNlYy9jb21tb24nO1xuXG5pbXBvcnQge19fU0VDVVJFX1JFU09MVkVSX1VSTF9ffSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQge1xuICBTZWN1cmVSZXNvbHZlckFjdGlvbk1lc3NhZ2VNYXAsXG4gIFNlY3VyZVJlc29sdmVyQWN0aW9uUmVzcG9uc2VNZXNzYWdlTWFwLFxuICBTZWN1cmVSZXNvbHZlckFwaUZhaWxSZXNwb25zZSxcbiAgU2VjdXJlUmVzb2x2ZXJBcGlTdWNjZXNzUmVzcG9uc2UsXG4gIFZhbGlkU2VjdXJlUmVzb2x2ZXJBcGlSZXF1ZXN0VHlwZXMsXG59IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNlY3VyZUVuY2xhdmVTdWNjZXNzQXBpUmVzcG9uc2U8VD4ge1xuICBzdWNjZXNzOiB0cnVlO1xuICBkYXRhOiBUO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlY3VyZUVuY2xhdmVGYWlsQXBpUmVzcG9uc2Uge1xuICBzdWNjZXNzOiBmYWxzZTtcbiAgZXJyb3I6IEVycm9yO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFrZVNlY3VyZUFwaVJlcXVlc3Q8XG4gIFQgZXh0ZW5kcyBWYWxpZFNlY3VyZVJlc29sdmVyQXBpUmVxdWVzdFR5cGVzLFxuICBUUmVxdWVzdCBleHRlbmRzIFNlY3VyZVJlc29sdmVyQWN0aW9uTWVzc2FnZU1hcFtUXVxuPihcbiAgcmVxdWVzdDogVFJlcXVlc3QsXG4gIHBhdGg6IHN0cmluZyxcbiAgcGFyYW1zOiBodHRwLkNsaWVudFJlcXVlc3RBcmdzXG4pOiBQcm9taXNlPFNlY3VyZUVuY2xhdmVTdWNjZXNzQXBpUmVzcG9uc2U8U2VjdXJlUmVzb2x2ZXJBY3Rpb25SZXNwb25zZU1lc3NhZ2VNYXBbVF0+IHwgU2VjdXJlRW5jbGF2ZUZhaWxBcGlSZXNwb25zZT4ge1xuICB0cnkge1xuICAgIC8vIFRPRE86IEFkZCBydW50aW1lIEpTT04gdmFsaWRhdGlvbiBmb3IgcmVzcG9uc2VcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG1ha2VSZXF1ZXN0PFxuICAgICAgU2VjdXJlUmVzb2x2ZXJBcGlTdWNjZXNzUmVzcG9uc2U8U2VjdXJlUmVzb2x2ZXJBY3Rpb25SZXNwb25zZU1lc3NhZ2VNYXBbVF0+IHwgU2VjdXJlUmVzb2x2ZXJBcGlGYWlsUmVzcG9uc2VcbiAgICA+KF9fU0VDVVJFX1JFU09MVkVSX1VSTF9fLCBwYXRoLCBwYXJhbXMsIGdldFJlcXVlc3RCb2R5KHJlcXVlc3QpKTtcblxuICAgIGlmICghcmVzcG9uc2Uuc3VjY2Vzcykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiBuZXcgRXJyb3IoXG4gICAgICAgICAgcmVzcG9uc2UubXNnICE9PSB1bmRlZmluZWQgPyByZXNwb25zZS5tc2cgOiAnTWFsZm9ybWVkIHJlc3BvbnNlIGZyb20gQVBJIHdpdGggbWlzc2luZyBlcnJvciBtZXNzYWdlJ1xuICAgICAgICApLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IHJlc3BvbnNlLnJlc3VsdCxcbiAgICB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXNzaWdubWVudFxuICAgICAgZXJyb3I6IGUsXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBHZW5lcmljQXBpQ2xpZW50ID0gPFQgZXh0ZW5kcyBWYWxpZFNlY3VyZVJlc29sdmVyQXBpUmVxdWVzdFR5cGVzPihcbiAgcmVxdWVzdDogU2VjdXJlUmVzb2x2ZXJBY3Rpb25NZXNzYWdlTWFwW1RdLFxuICByZXF1ZXN0T3ZlcnJpZGVzPzogaHR0cC5DbGllbnRSZXF1ZXN0QXJnc1xuKSA9PiBQcm9taXNlPFNlY3VyZUVuY2xhdmVTdWNjZXNzQXBpUmVzcG9uc2U8U2VjdXJlUmVzb2x2ZXJBY3Rpb25SZXNwb25zZU1lc3NhZ2VNYXBbVF0+IHwgU2VjdXJlRW5jbGF2ZUZhaWxBcGlSZXNwb25zZT47XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlR2VuZXJpY0FwaUNsaWVudChwYXRoOiBzdHJpbmcsIHJlcXVlc3RCYXNlQ29uZmlnOiBodHRwLkNsaWVudFJlcXVlc3RBcmdzKTogR2VuZXJpY0FwaUNsaWVudCB7XG4gIHJldHVybiBhc3luYyA8VCBleHRlbmRzIFZhbGlkU2VjdXJlUmVzb2x2ZXJBcGlSZXF1ZXN0VHlwZXM+KFxuICAgIHJlcXVlc3Q6IFNlY3VyZVJlc29sdmVyQWN0aW9uTWVzc2FnZU1hcFtUXSxcbiAgICByZXF1ZXN0T3ZlcnJpZGVzPzogaHR0cC5DbGllbnRSZXF1ZXN0QXJnc1xuICApID0+IHtcbiAgICBjb25zdCByZXF1ZXN0Q29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgcmVxdWVzdEJhc2VDb25maWcsIHJlcXVlc3RPdmVycmlkZXMpO1xuXG4gICAgcmV0dXJuIGF3YWl0IG1ha2VTZWN1cmVBcGlSZXF1ZXN0PFQsIFNlY3VyZVJlc29sdmVyQWN0aW9uTWVzc2FnZU1hcFtUXT4ocmVxdWVzdCwgcGF0aCwgcmVxdWVzdENvbmZpZyk7XG4gIH07XG59XG4iXX0=