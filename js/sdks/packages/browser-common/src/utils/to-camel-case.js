"use strict";
// Fork of: https://github.com/sindresorhus/camelcase/blob/main/index.js
Object.defineProperty(exports, "__esModule", { value: true });
exports.camelCaseObject = exports.toCamelCase = exports.postProcess = exports.preserveConsecutiveUppercase = exports.preserveCamelCase = void 0;
function preserveCamelCase(str, locale) {
    let isLastCharLower = false;
    let isLastCharUpper = false;
    let isLastLastCharUpper = false;
    for (let i = 0; i < str.length; i++) {
        const character = str[i];
        if (isLastCharLower && /[\p{Lu}]/u.test(character)) {
            str = str.slice(0, i) + '-' + str.slice(i);
            isLastCharLower = false;
            isLastLastCharUpper = isLastCharUpper;
            isLastCharUpper = true;
            i++;
        }
        else if (isLastCharUpper && isLastLastCharUpper && /[\p{Ll}]/u.test(character)) {
            str = str.slice(0, i - 1) + '-' + str.slice(i - 1);
            isLastLastCharUpper = isLastCharUpper;
            isLastCharUpper = false;
            isLastCharLower = true;
        }
        else {
            isLastCharLower =
                character.toLocaleLowerCase(locale) === character && character.toLocaleUpperCase(locale) !== character;
            isLastLastCharUpper = isLastCharUpper;
            isLastCharUpper =
                character.toLocaleUpperCase(locale) === character && character.toLocaleLowerCase(locale) !== character;
        }
    }
    return str;
}
exports.preserveCamelCase = preserveCamelCase;
function preserveConsecutiveUppercase(input) {
    return input.replace(/^[\p{Lu}](?![\p{Lu}])/gu, (m1) => m1.toLowerCase());
}
exports.preserveConsecutiveUppercase = preserveConsecutiveUppercase;
function postProcess(input, options) {
    return input
        .replace(/[_.\- ]+([\p{Alpha}\p{N}_]|$)/gu, (_, p1) => p1.toLocaleUpperCase(options.locale))
        .replace(/\d+([\p{Alpha}\p{N}_]|$)/gu, (m) => m.toLocaleUpperCase(options.locale));
}
exports.postProcess = postProcess;
function toCamelCase(input, options) {
    if (!options) {
        options = {
            pascalCase: false,
            preserveConsecutiveUppercase: false,
        };
    }
    if (Array.isArray(input)) {
        input = input
            .map((x) => x.trim())
            .filter((x) => x.length)
            .join('-');
    }
    else {
        input = input.trim();
    }
    if (input.length === 0) {
        return '';
    }
    if (input.length === 1) {
        return options.pascalCase ? input.toLocaleUpperCase(options.locale) : input.toLocaleLowerCase(options.locale);
    }
    const hasUpperCase = input !== input.toLocaleLowerCase(options.locale);
    if (hasUpperCase) {
        input = preserveCamelCase(input, options.locale);
    }
    input = input.replace(/^[_.\- ]+/, '');
    if (options.preserveConsecutiveUppercase) {
        input = preserveConsecutiveUppercase(input);
    }
    else {
        input = input.toLocaleLowerCase();
    }
    if (options.pascalCase) {
        input = input.charAt(0).toLocaleUpperCase(options.locale) + input.slice(1);
    }
    return postProcess(input, options);
}
exports.toCamelCase = toCamelCase;
function camelCaseObject(obj) {
    return Object.keys(obj).reduce((camelCaseObj, key) => {
        camelCaseObj[toCamelCase(key)] = obj[key];
        return camelCaseObj;
    }, {});
}
exports.camelCaseObject = camelCaseObject;
//# sourceMappingURL=data:application/json;base64,