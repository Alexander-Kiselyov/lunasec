"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generatePseudoElementCSS = exports.generateCssText = exports.getParentStyle = exports.getChildStyle = exports.filterStyleWith = exports.getStyleSnapshot = exports.createStyleElement = exports.isTagName = void 0;
const constants_1 = require("./constants");
function isTagName(el, tagNames) {
    return tagNames.indexOf(el.tagName.toLowerCase()) !== -1;
}
exports.isTagName = isTagName;
function createStyleElement(doc, css) {
    const style = doc.createElement('style');
    style.appendChild(doc.createTextNode(css));
    return style;
}
exports.createStyleElement = createStyleElement;
function getStyleSnapshot(style) {
    const snapshot = Object.create({});
    for (let i = 0; i < style.length; i++) {
        const prop = style[i];
        snapshot[prop] = style.getPropertyValue(prop);
    }
    return snapshot;
}
exports.getStyleSnapshot = getStyleSnapshot;
function filterStyleWith(style, filterFn) {
    return Object.keys(style).reduce((outputStyle, key) => {
        const shouldSkip = constants_1.SKIPPED_PROPERTIES.some((skipped) => key.startsWith(skipped));
        if (shouldSkip) {
            return outputStyle;
        }
        if (filterFn(key)) {
            outputStyle[key] = style[key];
        }
        return outputStyle;
    }, {});
}
exports.filterStyleWith = filterStyleWith;
function getChildStyle(style) {
    function filterChildAttributes(key) {
        return constants_1.ELEMENT_ATTRIBUTE_WHITELIST.some((property) => property === key.toLowerCase());
    }
    return filterStyleWith(style, filterChildAttributes);
}
exports.getChildStyle = getChildStyle;
function getParentStyle(style) {
    function filterChildAttributes(key) {
        return constants_1.PARENT_ELEMENT_STYLE_ATTRIBUTES.some((property) => property === key.toLowerCase());
    }
    return filterStyleWith(style, filterChildAttributes);
}
exports.getParentStyle = getParentStyle;
function generateCssText(style) {
    const declarations = [];
    for (const key in style) {
        if (!style.hasOwnProperty(key)) {
            continue;
        }
        declarations.push(`${key}:${style[key]};`);
    }
    return declarations.join('');
}
exports.generateCssText = generateCssText;
function generatePseudoElementCSS(target, selector, cssText) {
    if (!cssText) {
        return '';
    }
    // TODO: Is this a security issue?
    return `#${target.id}${selector}{${cssText}}`;
}
exports.generatePseudoElementCSS = generatePseudoElementCSS;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZG9tLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUErRztBQUcvRyxTQUFnQixTQUFTLENBQ3ZCLEVBQW9CLEVBQ3BCLFFBQWE7SUFFYixPQUFRLFFBQXFCLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN6RSxDQUFDO0FBTEQsOEJBS0M7QUFFRCxTQUFnQixrQkFBa0IsQ0FBQyxHQUFhLEVBQUUsR0FBVztJQUMzRCxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pDLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRTNDLE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUxELGdEQUtDO0FBRUQsU0FBZ0IsZ0JBQWdCLENBQUMsS0FBMEI7SUFDekQsTUFBTSxRQUFRLEdBQTJCLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDckMsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDL0M7SUFFRCxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDO0FBUkQsNENBUUM7QUFFRCxTQUFnQixlQUFlLENBQUMsS0FBb0IsRUFBRSxRQUFrQztJQUN0RixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ3BELE1BQU0sVUFBVSxHQUFHLDhCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ2pGLElBQUksVUFBVSxFQUFFO1lBQ2QsT0FBTyxXQUFXLENBQUM7U0FDcEI7UUFFRCxJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNqQixXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQy9CO1FBRUQsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQyxFQUFFLEVBQW1CLENBQUMsQ0FBQztBQUMxQixDQUFDO0FBYkQsMENBYUM7QUFFRCxTQUFnQixhQUFhLENBQUMsS0FBb0I7SUFDaEQsU0FBUyxxQkFBcUIsQ0FBQyxHQUFXO1FBQ3hDLE9BQU8sdUNBQTJCLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxRQUFRLEtBQUssR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDeEYsQ0FBQztJQUVELE9BQU8sZUFBZSxDQUFDLEtBQUssRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0FBQ3ZELENBQUM7QUFORCxzQ0FNQztBQUVELFNBQWdCLGNBQWMsQ0FBQyxLQUFvQjtJQUNqRCxTQUFTLHFCQUFxQixDQUFDLEdBQVc7UUFDeEMsT0FBTywyQ0FBK0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLFFBQVEsS0FBSyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUM1RixDQUFDO0lBRUQsT0FBTyxlQUFlLENBQUMsS0FBSyxFQUFFLHFCQUFxQixDQUFDLENBQUM7QUFDdkQsQ0FBQztBQU5ELHdDQU1DO0FBRUQsU0FBZ0IsZUFBZSxDQUFDLEtBQW9CO0lBQ2xELE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQztJQUV4QixLQUFLLE1BQU0sR0FBRyxJQUFJLEtBQUssRUFBRTtRQUN2QixJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM5QixTQUFTO1NBQ1Y7UUFDRCxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDNUM7SUFFRCxPQUFPLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDL0IsQ0FBQztBQVhELDBDQVdDO0FBRUQsU0FBZ0Isd0JBQXdCLENBQUMsTUFBd0IsRUFBRSxRQUFnQixFQUFFLE9BQWU7SUFDbEcsSUFBSSxDQUFDLE9BQU8sRUFBRTtRQUNaLE9BQU8sRUFBRSxDQUFDO0tBQ1g7SUFFRCxrQ0FBa0M7SUFDbEMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxFQUFFLEdBQUcsUUFBUSxJQUFJLE9BQU8sR0FBRyxDQUFDO0FBQ2hELENBQUM7QUFQRCw0REFPQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVMRU1FTlRfQVRUUklCVVRFX1dISVRFTElTVCwgUEFSRU5UX0VMRU1FTlRfU1RZTEVfQVRUUklCVVRFUywgU0tJUFBFRF9QUk9QRVJUSUVTIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgU3R5bGVTbmFwc2hvdCwgU3VwcG9ydGVkRWxlbWVudCwgU3VwcG9ydGVkRWxlbWVudFRhZ05hbWUsIFN1cHBvcnRlZEVsZW1lbnRUYWdOYW1lTWFwIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1RhZ05hbWU8VCBleHRlbmRzIFN1cHBvcnRlZEVsZW1lbnRUYWdOYW1lPihcbiAgZWw6IFN1cHBvcnRlZEVsZW1lbnQsXG4gIHRhZ05hbWVzOiBUW11cbik6IGVsIGlzIFN1cHBvcnRlZEVsZW1lbnRUYWdOYW1lTWFwW1RdIHtcbiAgcmV0dXJuICh0YWdOYW1lcyBhcyBzdHJpbmdbXSkuaW5kZXhPZihlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkpICE9PSAtMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudChkb2M6IERvY3VtZW50LCBjc3M6IHN0cmluZyk6IEhUTUxTdHlsZUVsZW1lbnQge1xuICBjb25zdCBzdHlsZSA9IGRvYy5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBzdHlsZS5hcHBlbmRDaGlsZChkb2MuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3R5bGVTbmFwc2hvdChzdHlsZTogQ1NTU3R5bGVEZWNsYXJhdGlvbik6IFN0eWxlU25hcHNob3Qge1xuICBjb25zdCBzbmFwc2hvdDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IE9iamVjdC5jcmVhdGUoe30pO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0eWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcHJvcCA9IHN0eWxlW2ldO1xuICAgIHNuYXBzaG90W3Byb3BdID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKTtcbiAgfVxuXG4gIHJldHVybiBzbmFwc2hvdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlclN0eWxlV2l0aChzdHlsZTogU3R5bGVTbmFwc2hvdCwgZmlsdGVyRm46IChrZXk6IHN0cmluZykgPT4gYm9vbGVhbik6IFN0eWxlU25hcHNob3Qge1xuICByZXR1cm4gT2JqZWN0LmtleXMoc3R5bGUpLnJlZHVjZSgob3V0cHV0U3R5bGUsIGtleSkgPT4ge1xuICAgIGNvbnN0IHNob3VsZFNraXAgPSBTS0lQUEVEX1BST1BFUlRJRVMuc29tZSgoc2tpcHBlZCkgPT4ga2V5LnN0YXJ0c1dpdGgoc2tpcHBlZCkpO1xuICAgIGlmIChzaG91bGRTa2lwKSB7XG4gICAgICByZXR1cm4gb3V0cHV0U3R5bGU7XG4gICAgfVxuXG4gICAgaWYgKGZpbHRlckZuKGtleSkpIHtcbiAgICAgIG91dHB1dFN0eWxlW2tleV0gPSBzdHlsZVtrZXldO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXRTdHlsZTtcbiAgfSwge30gYXMgU3R5bGVTbmFwc2hvdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGlsZFN0eWxlKHN0eWxlOiBTdHlsZVNuYXBzaG90KSB7XG4gIGZ1bmN0aW9uIGZpbHRlckNoaWxkQXR0cmlidXRlcyhrZXk6IHN0cmluZykge1xuICAgIHJldHVybiBFTEVNRU5UX0FUVFJJQlVURV9XSElURUxJU1Quc29tZSgocHJvcGVydHkpID0+IHByb3BlcnR5ID09PSBrZXkudG9Mb3dlckNhc2UoKSk7XG4gIH1cblxuICByZXR1cm4gZmlsdGVyU3R5bGVXaXRoKHN0eWxlLCBmaWx0ZXJDaGlsZEF0dHJpYnV0ZXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFyZW50U3R5bGUoc3R5bGU6IFN0eWxlU25hcHNob3QpIHtcbiAgZnVuY3Rpb24gZmlsdGVyQ2hpbGRBdHRyaWJ1dGVzKGtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIFBBUkVOVF9FTEVNRU5UX1NUWUxFX0FUVFJJQlVURVMuc29tZSgocHJvcGVydHkpID0+IHByb3BlcnR5ID09PSBrZXkudG9Mb3dlckNhc2UoKSk7XG4gIH1cblxuICByZXR1cm4gZmlsdGVyU3R5bGVXaXRoKHN0eWxlLCBmaWx0ZXJDaGlsZEF0dHJpYnV0ZXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVDc3NUZXh0KHN0eWxlOiBTdHlsZVNuYXBzaG90KTogc3RyaW5nIHtcbiAgY29uc3QgZGVjbGFyYXRpb25zID0gW107XG5cbiAgZm9yIChjb25zdCBrZXkgaW4gc3R5bGUpIHtcbiAgICBpZiAoIXN0eWxlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBkZWNsYXJhdGlvbnMucHVzaChgJHtrZXl9OiR7c3R5bGVba2V5XX07YCk7XG4gIH1cblxuICByZXR1cm4gZGVjbGFyYXRpb25zLmpvaW4oJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVQc2V1ZG9FbGVtZW50Q1NTKHRhcmdldDogU3VwcG9ydGVkRWxlbWVudCwgc2VsZWN0b3I6IHN0cmluZywgY3NzVGV4dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgaWYgKCFjc3NUZXh0KSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgLy8gVE9ETzogSXMgdGhpcyBhIHNlY3VyaXR5IGlzc3VlP1xuICByZXR1cm4gYCMke3RhcmdldC5pZH0ke3NlbGVjdG9yfXske2Nzc1RleHR9fWA7XG59XG4iXX0=